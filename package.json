{
  "_args": [
    [
      {
        "raw": "https://github.com/checho221/instagram-private-api.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/checho221/instagram-private-api.git",
        "spec": "git+https://github.com/checho221/instagram-private-api.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:checho221/instagram-private-api.git",
          "sshUrl": "git+ssh://git@github.com/checho221/instagram-private-api.git",
          "httpsUrl": "git+https://github.com/checho221/instagram-private-api.git",
          "gitUrl": "git://github.com/checho221/instagram-private-api.git",
          "shortcut": "github:checho221/instagram-private-api",
          "directUrl": "https://raw.githubusercontent.com/checho221/instagram-private-api/master/package.json"
        }
      },
      "C:\\Users\\sergi\\code\\instaplanner"
    ]
  ],
  "_from": "git+https://github.com/checho221/instagram-private-api.git",
  "_id": "instagram-private-api@0.7.1",
  "_inBundle": false,
  "_inCache": true,
  "_location": "/instagram-private-api",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/checho221/instagram-private-api.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/checho221/instagram-private-api.git",
    "spec": "git+https://github.com/checho221/instagram-private-api.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:checho221/instagram-private-api.git",
      "sshUrl": "git+ssh://git@github.com/checho221/instagram-private-api.git",
      "httpsUrl": "git+https://github.com/checho221/instagram-private-api.git",
      "gitUrl": "git://github.com/checho221/instagram-private-api.git",
      "shortcut": "github:checho221/instagram-private-api",
      "directUrl": "https://raw.githubusercontent.com/checho221/instagram-private-api/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/checho221/instagram-private-api.git#50a84f2fec298ac97ea5285fe61f2a8bd5de9200",
  "_shasum": "e0c75b25d39370bcdedf2c3da86203217e6d701e",
  "_shrinkwrap": null,
  "_spec": "https://github.com/checho221/instagram-private-api.git",
  "_where": "C:\\Users\\sergi\\code\\instaplanner",
  "bugs": {
    "url": "https://github.com/huttarichard/instagram-private-api/issues",
    "email": "huttarichard@gmail.com"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bluebird": "^3.5.2",
    "camelcase-keys": "^4.2.0",
    "crypto-js": "^3.1.6",
    "instagram-id-to-url-segment": "0.0.0",
    "is-stream": "^1.1.0",
    "js-md5": "^0.3.0",
    "json-bigint": "^0.2.0",
    "lodash": "^4.17.5",
    "node-cache": "^3.0.0",
    "proxy-agent": "^3.0.3",
    "request": "^2.88.0",
    "request-promise": "^4.2.2",
    "touch": "^1.0.0",
    "tough-cookie": "^2.3.3",
    "tough-cookie-file-store": "^1.2.0",
    "underscore.string": "^3.3.5",
    "valid-url": "^1.0.9"
  },
  "deprecated": false,
  "description": "Instagram private API wrapper for full access to instagram",
  "devDependencies": {
    "dotenv": "^6.2.0",
    "faker": "^3.1.0",
    "gm": "^1.23.1",
    "image-diff": "^1.6.3",
    "inquirer": "^1.1.2",
    "mkdirp": "^0.5.1",
    "mocha": "^5.2.0",
    "node-resemble-js": "0.0.5",
    "should": "^8.3.1",
    "should-sinon": "0.0.5",
    "sinon": "^1.17.3",
    "tmp": "0.0.28"
  },
  "engines": {
    "node": "7.6.0"
  },
  "gitHead": "50a84f2fec298ac97ea5285fe61f2a8bd5de9200",
  "homepage": "https://github.com/huttarichard/instagram-private-api",
  "license": "MIT",
  "main": "index.js",
  "name": "instagram-private-api",
  "optionalDependencies": {},
  "readme": "Instagram Private NODE.JS API \r\n===================\r\n![logo](https://cloud.githubusercontent.com/assets/1809268/15931032/2792427e-2e56-11e6-831e-ffab238cc4a2.png)\r\n\r\n![travis](https://travis-ci.org/huttarichard/instagram-private-api.svg)\r\n[![npm](https://img.shields.io/npm/dm/instagram-private-api.svg?maxAge=600)](https://www.npmjs.com/package/instagram-private-api)\r\n[![npm](https://img.shields.io/npm/l/instagram-private-api.svg?maxAge=600)](https://github.com/huttarichard/instagram-private-api/blob/master/LICENSE)\r\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg?maxAge=600)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=huttarichard%40gmail%2ecom&lc=MQ&item_name=Github%20IG%20API&no_note=0&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)\r\n[![Join the chat at https://gitter.im/instagram-private-api/Lobby](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/instagram-private-api/Lobby)\r\n\r\n----\r\n\r\n*Carefully consider using this library. Iâ€™m no longer maintaining the repository.*\r\n\r\nCommunity is taking care of development and new features. Thanks to: @IvanMMM @SergeyMihrjakov @dilame @sebyddd @hieven\r\n\r\n----\r\n\r\n**Installation**\r\n\r\n\r\nYou can install this by using npm:\r\n```\r\nnpm install instagram-private-api\r\n```\r\n----\r\n\r\n**Do you like this project:**\r\n\r\nMost of us are fighting with time, please support to give me more time to do more awesome features!\r\n\r\n----\r\n\r\n**What is this?** \r\n\r\nSince I had a lot of troubles with the official API (sandbox etc.). I decided to make a Node.JS api wrapper and to provide the code to others. \r\nIt is an OOP api, and has a small coverage ... **I DO NOT USE THIS FOR SPAM**, hope you will not either. \r\n\r\n---\r\n\r\n**What can you do with this API wrapper?** \r\n\r\nPretty much anything that the Instagram PRIVATE API allows, except for some endpoints that you need to \r\nimplement by yourself or make a pull request to the repository.\r\n\r\nFeatures:\r\n  - You can easily ask for any private endpoint with the `Request` and `WebRequest` classes\r\n  - Session and device management\r\n  - Follow / unfollow\r\n  - Upload / delete medias (photos)\r\n  - Like anything you like :P\r\n  - Search & Iterate for Location, Users, Hashtags\r\n  - Edit account profile\r\n  - Resolve challenges (Captcha, Phone verification, Email verification)\r\n  - Access media from many sources profile / location / hashtag\r\n  - Access feeds for timeline or discovery\r\n  - Create and manage new accounts  \r\n  - Send direct messages or list direct messages in inbox\r\n  - Much more ...\r\n\r\n**How to use this (quick follow example)?** \r\n\r\n\r\nYou need to obtain a session to access endpoints with the `Session` class:\r\n\r\n```javascript\r\nvar Client = require('instagram-private-api').V1;\r\nvar device = new Client.Device('someuser');\r\nvar storage = new Client.CookieFileStorage(__dirname + './cookies/someuser.json');\r\n\r\n// And go for login\r\nClient.Session.create(device, storage, 'someuser', 'somepassword')\r\n\t.then(function(session) {\r\n   \t\t// Now you have a session, we can follow / unfollow, anything...\r\n\t\t// And we want to follow Instagram official profile\r\n\t\treturn [session, Client.Account.searchForUser(session, 'instagram')]   \r\n\t})\r\n\t.spread(function(session, account) {\r\n\t\treturn Client.Relationship.create(session, account.id);\r\n\t})\r\n\t.then(function(relationship) {\r\n\t\tconsole.log(relationship.params)\r\n\t\t// {followedBy: ... , following: ... }\r\n\t\t// Yey, you just followed @instagram\r\n\t})\r\n```\r\n\r\n---\r\n\r\n**Request & WebRequest Classes**\r\n\r\n> Nice! So you mentioned that we can hit any endpoint?\r\n\r\nThat is true. Every request going to Instagram is actually performed through the\r\nRequest & WebRequest classes. For the private endpoints used by Android or iPhone,\r\nyou can simply use the `Request` class, which will lead to the host `i.instagram.com`. For requests to `www.instagram.com` (web app), you can use\r\nthe `WebRequest` class. `WebRequest` is a child of `Request`;\r\n\r\nHere is an example (how likes are actually implemented):\r\n\r\n```javascript\r\nreturn new Client.Request(session)\r\n\t.setMethod('POST')\r\n\t.setResource('like', {id: mediaId})\r\n\t.generateUUID()\r\n\t.setData({\r\n\t\tmedia_id: mediaId,\r\n\t\tsrc: \"profile\"\r\n\t})\r\n\t.signPayload()\r\n\t.send()\r\n\t.then(function(data) {\r\n\t\treturn new Client.Like(session, {});\r\n\t})\r\n```\r\n> If you don't know how to find the media ID of an image, you might find this [link](https://stackoverflow.com/questions/16758316/where-do-i-find-the-instagram-media-id-of-a-image) helpful. There is an NPM [package](https://www.npmjs.com/package/instagram-id-to-url-segment) that convert the image url fragment to the media ID for you.  \r\n**Let me make this clearer and explain it a little bit more in detail:**\r\n\r\nThe `Request` constructor accepts, as its first and only argument a class\r\nwhich should be an instanceof `Session` class. `Session` class is the\r\nglue between `Device` and `CookieStorage`. So if you create a session,\r\nyou can easily hit any endpoint without worrying about authentication \r\nor cookies management.\r\n\r\n`.setResource(resource:string, params:Object)` \r\n\r\nis the method to setup the URL, which can be also interpreted as\r\n\r\n`.setUrl(url:string)`\r\n\r\nbut the `setResource` method has a predefined list of endpoints, so you don't\r\nneed to construct the URL by yourself.\r\n\r\n`.generateUUID()`\r\n\r\nwill generate a Device UUID, which is what every device does, but it's probably\r\nnot required. It is also available on `Device.prototype` as property `id`\r\n\r\n`.setData(params:Object, override:boolean)`\r\n\r\nwill set data you want to send to the Instagram endpoint. With the `Request` class\r\nyou can set the body format of the request with method \r\n\r\n`.setBodyType(type:string)` \r\n\r\nchoices used by instagram are `json`, `form`, `body`, `formData` (default).\r\n\r\n`.signPayload()`\r\n\r\nsome endpoints require a signed payload. Under the hood the Instagram apps\r\nactually have C++ libraries that are compiled into machine code. This means\r\nit is not really easy to see the source of these libraries. This is a great \r\nway to not let developers see what is going on. And there is a library\r\ncalled `libstrings.so`, that has methods to generate signatures for the JSON payload\r\nyou want to send to Instagram. Funny thing about that is, you need ARM based\r\nprocessor to use these libraries, so you can sign requests but only on ARM based processors.\r\n\r\nThis actually gives us 2 choices. One is to start a (virtual) machine with\r\nsuch processor and build some kind of bridge to communicate. The second is to find out how\r\n`libstrings.so` is working and apply the same behavior in node (which would of course be better).\r\n\r\nMore about this interesting technique and how to extract keys and also a great\r\nsource of learning is here: [MKHDZNFQ Blog](https://mokhdzanifaeq.github.io/index.html)\r\n\r\nLuckily for us, we know and we are able to analyze `libstrings.so` and thus\r\nwe have a clean implementation of signatures for Instagram.\r\n\r\nSignatures are not required for all endpoints, but for all sensitive ones \r\n(likes / follow / directs / login), you will receive a `400 Bad Request` error, without signature.\r\n\r\n\r\nExample of JSON payload to sign-in:\r\n\r\n```\r\n65eeaed09d7729f7aea06249c9fa33abd8a65a2a6514658f515346170b27c75b.{\"_csrftoken\":\"missing\",\"device_id\":\"android-85ee13e5ce740e2d\",\"_uuid\":\"3c0755b3-a510-4a8e-8674-feb7219c2159\",\"username\":\"xxxxxxxxxx\",\"password\":\"xxxxxxxxx\",\"login_attempt_count\":0}\r\n```\r\n\r\nThe first is the hash (signature), followed by dot and then the JSON payload.\r\nThe hash is actually created by HMAC encryption, in combination with an\r\nencryption key called the `private key`.\r\n\r\n\r\n`.send(options:Object)`\r\n\r\nany other options you want to apply to request should be passed as the first\r\nargument to the `.send` method;\r\n\r\n`.then` is just promise library. Must be called after `.send`.\r\nWe are using [Bluebird library](http://bluebirdjs.com/docs/api-reference.html)\r\nwhich is a really nice way to work with promises.\r\n\r\nThe `Request` and `Webrequest` classes are built on top of the Request.js library.\r\nThe `Webrequest` library can actually use same session. No need to create a new one.\r\n\r\n> If you need to sniff traffic to see what your phone is doing and see the\r\n> available endpoints I strongly recommend [Charles Debug Proxy](charlesproxy.com).\r\n> Easiest combination for me is iPhone + Charles. iPhone allows you to redirect \r\n> all your traffic to your local machine and then you can inspect what is going\r\n> on by putting Charles in middle. Traffic is encrypted by SSL, so you need\r\n> to install Charles root certificate first.\r\n\r\n---\r\n\r\n\r\n**Session and cookies management:**\r\n\r\n> So you said earlier there is a class gluing cookies and device, what?\r\n\r\nThe Session class is actually gluing any instance of `CookieStorage` and `Device` together. \r\nEvery request to Instagram must be chained with proper headers and data,\r\nin order to make endpoints work.\r\nFor example every endpoint requires a proper `User-Agent` header in\r\norder to verify signature or `X-CSFR-Token` | `_csrftoken` to verify that you\r\nare doing request intentionally.\r\n\r\n\r\n**CookieStorage & CookieFileStorage & CookieMemoryStorage**\r\n\r\nYou can store cookies anywhere you want. Cookies are done with [tough-cookie](https://github.com/SalesforceEng/tough-cookie/).\r\nSimple overview would be that, `CookieStorage` should have property\r\nstore, which should be child instance of `tough.Store` class.\r\n\r\nFor more info checkout this:\r\n\r\n[tough.Store](https://github.com/SalesforceEng/tough-cookie/blob/master/lib/store.js) and\r\n[internal class `CookieFileStorage`](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/cookie-file-storage.js)\r\n\r\n\r\n```javascript\r\nvar storage = new Client.CookieFileStorage(__dirname + './cookies/someuser.json');\r\n// or simply var storage = new Client.CookieMemoryStorage();\r\nstorage.getAccountId()\r\n\t.then(function(accountId){\r\n\t\tconsole.log(accountId);\r\n\t\t// will return actual userId from cookies\r\n\t})\r\n```\r\n\r\n**Session class**\r\n\r\nYou can create a new instance of Session by calling \r\n`var session = new Client.Session(device:Device, storage:CookieStorage)`\r\n\r\nIf you have valid cookies, you don't need to worry about anything else\r\nif you don't, you need to create a session with storage and device.\r\n\r\nstatic method \r\n\r\n`Session.create(device:Device, storage:CookieStorage, username:string, password:string, proxyUrl?:string)`\r\n\r\ncan help you with that. This method will sign-in and create a \r\nnew Session instance.\r\n\r\n`.getAccountId() : Promise<void|string>`\r\n\r\nthis method returns the account id from cookies\r\n\r\n`.setProxy(proxyUrl:string)`\r\n\r\nthis will set proper proxy-url. More about this below.\r\n\r\n`.getAccount() : Promise<Account>`\r\n\r\nwill return the account object associated with your session.\r\n\r\n\r\n```javascript\r\n// lets assume you got valid session\r\n// var session = new Client.Session(device, storage)\r\nsession.getAccount()\r\n  .then(function(account) {\r\n\tconsole.log(account.params)\r\n\t// {username: \"...\", ...}\r\n  })\r\n```\r\n---\r\n\r\n**Device class**\r\n\r\nYou can instantize new class, which will be able to represent it self as a device\r\nyou are using to access instagram. By default it will generate device\r\nfrom list of devices (can be found at `client/v1/devices.json`).\r\n\r\nReason for username in arguments is that you need to have same device\r\nfor same user every time when you access instagram API. This is done through\r\ncorrelated md5 username hash.\r\n\r\nAlso `Device` class is responsible for the `phone_id` property, which is often\r\nsent with other data. It is responsible for generating a correlated `android-id`.\r\n\r\n```\r\nvar device = new Client.Device('username');\r\ndevice.md5 // will return md5 of your username\r\ndevice.md5int // will return md5 integer representation of your device\r\ndevice.info // will give you device model information\r\ndevice.resolution // will give you resolution of device\r\ndevice.dpi // will give you dpi of device\r\ndevice.api // android API\r\ndevice.release // android release\r\n\r\ndevice.userAgent() // will return useragent for device \r\n```\r\n\r\n`device.userAgent` method is very important for many reasons. One of them\r\nis that without proper user agent there is no way how you can access signed endpoints.\r\n\r\n---\r\n\r\n**How to proxy every request:**\r\n\r\n\r\nThere are 2 choices to proxy requests:\r\n\r\nProxy URL has a standard format: \r\n - Unauthenticated: `http(s)://yourhost.com/`\r\n - Authenticated: `http(s)://user:pass@yourhost.com/`\r\n\r\n1) You can set a global proxy or default proxy by calling\r\n`Client.Request.setProxy(proxyURL)`\r\n\r\n2) Or if you are interested in one proxy per session\r\n`session.proxyUrl = proxyURL` SAME AS `session.setProxy(proxyURL)`\r\n\r\nIf you use a combination of these two methods, the first one has lower priority, \r\nmeaning that, if you set a global proxy, and then a session proxy, the session\r\nproxy will be used.\r\n\r\nStatic `.create` method also accepts the proxy as last (optional parameter)\r\n\r\n`Session.create(device, storage, username, password, proxyURL)`\r\n\r\n---\r\n\r\n**Resource classes:**\r\n\r\n`InstagramResource` class is the base class for every resource.\r\n\r\nFrom this class inherit:\r\n\r\n[Account](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/account.js),\r\n[Comment](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/comment.js),\r\n[Hashtag](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/hashtag.js),\r\n[Like](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/like.js),\r\n[Location](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/location.js),\r\n[Media](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/media.js),\r\n[Relationship](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/relationship.js),\r\n[Thread](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/thread.js),\r\n[ThreadItem](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/thread-item.js),\r\n[Upload](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/upload.js)\r\n\r\n\r\n`InstagramResource` constructor accepts two arguments:\r\n\r\n`new InstagramResource(session: Session, params: Object)`\r\n\r\nThis class is keeping the session and params of every resource class mentioned above.\r\n\r\nRemember this example?\r\n\r\n```javascript\r\n// let's assume you got a valid session\r\n// var session = new Client.Session(device, storage)\r\nsession.getAccount()\r\n  .then(function(account) {\r\n\tconsole.log(account.params)\r\n\t// {username: \"...\", ...}\r\n  })\r\n```\r\n\r\n`account.params` actually came from `InstagramResource`.\r\n\r\nAccount static `.getById` implementation as an example:\r\n\r\n```javascript\r\nAccount.getById = function (session, id) {\r\n    return new Request(session)\r\n        .setMethod('GET')\r\n        .setResource('userInfo', {id: id})\r\n        .send()\r\n        .then(function(data) {\r\n\t\t\t// data variable is a pure JSON object which will be parsed\r\n\t\t\t// by Account.prototype.parse and set as the top level property params \r\n            return new Account(session, data.user)\r\n        })\r\n};  \r\n\r\n// Usage\r\n\r\nAccount.getById(session, '1234567')\r\n\t.then(function(account) {\r\n\t\tconsole.log(account.params);\r\n\t\t// {username: \"...\", ...}\r\n\t\tconsole.log(account.id);\r\n\t\t// only property which is exported as top level\r\n\t\t// property\r\n\t})\r\n\r\n```\r\n\r\n\r\nAnother example would be upload:\r\n\r\n```javascript\r\n// JPEG is the only supported format now, pull request for any other format welcomed!\r\nClient.Upload.photo(session, './path/to/your/jpeg.jpg')\r\n\t.then(function(upload) {\r\n\t\t// upload instanceof Client.Upload\r\n\t\t// nothing more than just keeping upload id\r\n\t\tconsole.log(upload.params.uploadId);\r\n\t\treturn Client.Media.configurePhoto(session, upload.params.uploadId, 'akward caption');\r\n\t})\r\n\t.then(function(medium) {\r\n\t\t// we configure medium, it is now visible with caption\r\n\t\tconsole.log(medium.params)\r\n\t})\r\n```\r\n\r\nVideo upload:\r\n```javascript\r\n// MP4 is the only supported format now, pull request for any other format welcomed!\r\nClient.Upload.video(session, './path/to/your/video.mp4','./path/to/your/coverImg.jpg')\r\n\t.then(function(upload) {\r\n\t\treturn Client.Media.configureVideo(session, upload.uploadId, 'akward caption', upload.durationms);\r\n\t})\r\n\t.then(function(medium) {\r\n\t\t// we configure medium, it is now visible with caption\r\n\t\tconsole.log(medium.params)\r\n\t})\r\n```\r\n\r\nAlbum upload:\r\n```javascript\r\nvar medias = [\r\n\t{\r\n        type: 'photo',\r\n        size: [400, 400],\r\n        data: './path/to/photo/photo.jpg'\r\n    }, \r\n    {\r\n        type: 'video',\r\n        size: [720, 720],\r\n        thumbnail: './path/to/video/thumbnail/thumbnail.jpg',\r\n        data: './path/to/video/video.mp4'\r\n    } // ... up to 10 media files (photo/video)\r\n], disabledComments = true;\r\n\r\nClient.Upload.album(session, medias)\r\n    .then(function (payload) {\r\n        Client.Media.configureAlbum(session, payload, 'akward caption', disabledComments)\r\n    })\r\n    .then(function () {\r\n        // we configure album\r\n    })    \r\n```\r\n\r\n\r\n---\r\n\r\n**Feeds**\r\n\r\nFeed is the class which implements functionality to iterate\r\nthrough a list (which can be an infinite list) of data, like user media or \r\nhashtag media or locations.\r\n\r\nEvery feed implements the method `.get` to help you\r\ngo move the cursor and fetch items until you hit the bottom.\r\n\r\n`cursor` is a sort of pagination for the API. Basically in every\r\nrequest you will receive the next cursor for next request, which will\r\nlead to another set of data for this specific feed.\r\n\r\nImplemented are:\r\n[AccountFollowers](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/account-followers.js),\r\n[AccountFollowing](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/account-following.js),\r\n[UserMedia](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/user-media.js),\r\n[LocationMedia](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/location-media.js),\r\n[TaggedMedia](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/tagged-media.js),\r\n[MediaComments](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/media-comments.js),\r\n[SelfLiked](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/self-liked.js),\r\n[TimelineFeed](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/timeline-feed.js),\r\n[Inbox](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/inbox.js),\r\n[Thread](https://github.com/huttarichard/instagram-private-api/blob/master/client/v1/feeds/thread.js)\r\n\r\n**Feed API is the same almost every time:**\r\n\r\n`var feed = new Client.Feed.UserMedia(session:Session, ...extraArguments)`\r\n\r\nSince feeds can be infinite and we cannot obviosly fetch all results, we need\r\nto iterate. Every time you call `.get`, you will receive a new set of data\r\nand set new `cursor`.\r\n\r\n`feed.get() : Promise<Media[]>`\r\n\r\n```javascript\r\nvar _ = require('lodash');\r\nvar Promise = require('bluebird');\r\n\r\nvar accountId = '123456'\r\nvar feed = new Client.Feed.UserMedia(session, accountId);\r\n\r\nPromise.mapSeries(_.range(0, 20), function() {\r\n\treturn feed.get();\r\n})\r\n.then(function(results) {\r\n\t// result should be Media[][]\r\n\tvar media = _.flatten(results);\r\n\tvar urls = _.map(media, function(medium) {\r\n\t\treturn _.last(medium.images)\r\n\t});\r\n\tconsole.log(urls);\r\n})\r\n```\r\n\r\n`feed.getCursor() : string`\r\n\r\nwill return the current `cursor`, which will be set after calling `.get`\r\n\r\n`feed.setCursor() : void`\r\n\r\nwill set new `cursor`, from which you can start to iterate\r\n\r\n`feed.isMoreAvailable() : Boolean`\r\n\r\nreturns a boolean indicating if there is more data to fetch.\r\nOf course you can hit bottom and then there would be no other data to fetch.\r\n\r\nSome feeds have more methods to make things easier. You can check them out.\r\n\r\n---\r\n\r\n**Account Creator**\r\n\r\n`AccountCreator` and his children `AccountEmailCreator`, `AccountPhoneCreator`\r\nare designed to create an account. To make account you want to probably use either\r\n`AccountEmailCreator` or `AccountPhoneCreator`.\r\n`AccountCreator` it self is just abstraction. \r\n\r\nExample of `AccountEmailCreator`:\r\n\r\n```javascript\r\n// Create empty session\r\nvar session = new Client.Session(device, storage);\r\nnew AccountEmailCreator(session)\r\n\t.setEmail('....@....')\r\n\t.setUsername('nickname')\r\n\t.setPassword('pwd')\r\n\t.setName('Name')\r\n\t.register()\r\n\t.spread(function(account, discover) {\r\n\t\t// account instanceof Client.Account\r\n\t\tconsole.log(\"Created Account\", account)\r\n\t\tconsole.log(\"Discovery Feed\", discover);\r\n\t})\r\n```\r\n\r\n\r\nExample of `AccountPhoneCreator`:\r\n\r\n```javascript\r\n// Create empty session\r\nvar session = new Client.Session(device, storage);\r\nnew AccountPhoneCreator(session)\r\n\t.setPhone('phone number ie 111222333')\r\n\t.setUsername('nickname')\r\n\t.setPassword('pwd')\r\n\t.setName('Name')\r\n\t.setPhoneCallback(function() {\r\n\t\t// This will be called in order to \r\n\t\t// supply verification code, must return promise\r\n\t\t// with actual value\r\n\t\treturn Promise.resolve(\"123456\")\r\n\t})\r\n\t.register()\r\n\t.spread(function(account, discover) {\r\n\t\t// account instanceof Client.Account\r\n\t\tconsole.log(\"Created Account\", account)\r\n\t\tconsole.log(\"Discovery Feed\", discover);\r\n\t})\r\n```\r\n\r\nServal exceptions can be raised. \r\n  - `InvalidEmail` if you dont supply valid email\r\n  - `InvalidUsername` if you dont have valid username\r\n  - `InvalidPhone` for invalid phone number\r\n  - `InvalidPassword` is you password is for example too short\r\n  - `AccountRegistrationError` when instagram denied your code or registrion\r\n  - `AuthenticationError` when account is created but you did not successfuly log in\r\n\r\nIf you tried too much for you testing purposes you can supply proxy to\r\nsession. Check the \"How to proxy every request\" section.\r\n\r\n---\r\n\r\n**Challenges**\r\n\r\nThe `Challenge` class and its children are a way to somehow respond to \r\nInstagram verification requests. Let me tell you this first: **I hope you will\r\nnot spam Instagram, because they are providing a really great service\r\nand this repo should just be used for easier access to their API**... Anyway\r\nInstagram is really freaking smart and aggressive about getting you banned for \r\nany malicious activity, so be careful Icarus and don't spam.\r\n\r\nIn case you don't have any malicious intentions and you get into a situation\r\nthat requires you to verify via mail or phone you can use the challenge classes to automate\r\nthis process.\r\n\r\nExample first:\r\n\r\n```javascript\r\n// var device, storage, user, password;\r\n// you get those from previous examples\r\n\r\nfunction challengeMe(error){\r\n\treturn Client.Web.Challenge.resolve(error,'phone')\r\n\t\t.then(function(challenge){\r\n\t\t\t// challenge instanceof Client.Web.Challenge\r\n\t\t\tconsole.log(challenge.type);\r\n\t\t\t// can be phone or email\r\n\t\t\t// let's assume we got phone\r\n\t\t\tif(challenge.type !== 'phone') return;\r\n\t\t\t//Let's check if we need to submit/change our phone number\r\n\t\t\treturn challenge.phone('79876543210')\r\n\t\t\t\t.then(function(){return challenge});\r\n\t\t})\r\n\t\t.then(function(challenge){\r\n\t\t\t// Ok we got to the next step, the response code expected by Instagram\r\n\t\t\treturn challenge.code('123456');\r\n\t\t})\r\n\t\t.then(function(challenge){\r\n\t\t\t// And we got the account confirmed!\r\n\t\t\t// so let's login again\r\n\t\t\treturn loginAndFollow(device, storage, user, password);\r\n\t\t})\r\n}\r\n\r\n\r\nfunction loginAndFollow(device, storage, user, password) {\r\n\treturn Client.Session.create(device, storage, user, password)\r\n\t\t.then(function(session) {\r\n\t\t\t// Now you have a session, we can follow / unfollow, anything...\r\n\t\t\t// And we want to follow Instagram official profile\r\n\t\t\treturn [session, Client.Account.searchForUser(session, 'instagram')]   \r\n\t\t})\r\n\t\t.spread(function(session, account) {\r\n\t\t\treturn Client.Relationship.create(session, account.id);\r\n\t\t})\r\n}\r\n\r\n\r\nloginAndFollow(device, storage, user, password)\r\n\t.catch(Client.Exceptions.CheckpointError, function(error){\r\n\t\t// Ok now we know that Instagram is asking us to\r\n\t\t// prove that we are real users\r\n\t\treturn challengeMe(error);\r\n\t}) \r\n\t.then(function(relationship) {\r\n\t\tconsole.log(relationship.params)\r\n\t\t// {followedBy: ... , following: ... }\r\n\t\t// Yey, you just followed an account\r\n\t});\r\n```\r\n\r\nMore common for such a situation is [PhoneVerification](https://github.com/huttarichard/instagram-private-api/tree/master/client/v1/web/challenge.js#L44).\r\nOf course there are services like textnow.com and others which will provide\r\nan API to let you receive Instagram SMS messages!\r\n\r\n\r\n---\r\n\r\n**Similar repository:**\r\n\r\n[https://github.com/mgp25/Instagram-API](https://github.com/mgp25/Instagram-API)\r\n\r\n---\r\n\r\n**End User License Agreement (EULA)**\r\n\r\n  1) *You will not use* this repository for sending mass spam or any other malicious activity\r\n  2) *We / You will not support* anyone who is violating this EULA conditions\r\n  3) *Repository is just for learning / personal purposes* thus should not be part of any \r\n  \tservice available on the Internet that is trying to do any malicious activity (mass bulk request, spam etc.)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/huttarichard/instagram-private-api.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --inline-diffs --timeout 1000000 tests/run.js"
  },
  "version": "0.7.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "7.6.0"
      },
      "pkgid": "instagram-private-api@0.7.1"
    }
  ]
}
